import {
  require_jsx_runtime
} from "./chunk-6PXSGDAH.js";
import {
  require_react
} from "./chunk-DRWLMN53.js";
import {
  __toESM
} from "./chunk-G3PMV62Z.js";

// node_modules/tslib/tslib.es6.mjs
var __assign = function() {
  __assign = Object.assign || function __assign2(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function __rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1) throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
  return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];
      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          _.label++;
          return { value: op[1], done: false };
        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;
        case 7:
          op = _.ops.pop();
          _.trys.pop();
          continue;
        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }
          if (t && _.label < t[2]) {
            _.label = t[2];
            _.ops.push(op);
            break;
          }
          if (t[2]) _.ops.pop();
          _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}

// node_modules/react-barcode-scanner/esm/hooks/use-camera.js
var import_react2 = __toESM(require_react());

// node_modules/react-barcode-scanner/esm/helper/utils.js
var eventListener = function(target_1, event_1) {
  var args_1 = [];
  for (var _i = 2; _i < arguments.length; _i++) {
    args_1[_i - 2] = arguments[_i];
  }
  return __awaiter(void 0, __spreadArray([target_1, event_1], args_1, true), void 0, function(target, event, errorEvent) {
    var $resolve, $reject, promise;
    if (errorEvent === void 0) {
      errorEvent = "error";
    }
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          promise = new Promise(function(resolve, reject) {
            $resolve = resolve;
            $reject = reject;
            target.addEventListener(event, $resolve);
            target.addEventListener(errorEvent, $reject);
          }).finally(function() {
            target.removeEventListener(event, $resolve);
            target.removeEventListener(errorEvent, $reject);
          });
          return [4, promise];
        case 1:
          return [2, _a.sent()];
      }
    });
  });
};
var timeout = function(milliseconds) {
  return __awaiter(void 0, void 0, void 0, function() {
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          return [4, new Promise(function(resolve) {
            return setTimeout(resolve, milliseconds);
          })];
        case 1:
          _a.sent();
          return [2];
      }
    });
  });
};

// node_modules/react-barcode-scanner/esm/hooks/use-stream-state.js
var import_react = __toESM(require_react());
var subscriptions = [];
function set(newValue) {
  setTimeout(function() {
    subscriptions.forEach(function(c) {
      c(newValue);
    });
  });
}
function useStreamState() {
  var _a = (0, import_react.useState)(), stream = _a[0], setStream = _a[1];
  (0, import_react.useEffect)(function() {
    var index = subscriptions.push(setStream);
    return function() {
      subscriptions.splice(index, 1);
    };
  }, []);
  return [stream, set];
}

// node_modules/react-barcode-scanner/esm/hooks/use-camera.js
var DEFAULT_CONSTRAINTS = {
  width: { min: 640, ideal: 1280 },
  height: { min: 480, ideal: 720 },
  facingMode: {
    ideal: "environment"
  },
  advanced: [
    { width: 1920, height: 1280 },
    { aspectRatio: 1.333 }
  ]
};
function useCamera(ref, trackConstraints) {
  var _this = this;
  var _a = (0, import_react2.useState)(false), isCameraSupported = _a[0], setCameraSupported = _a[1];
  var _b = useStreamState(), setStream = _b[1];
  (0, import_react2.useEffect)(function() {
    if (!window.isSecureContext) {
      throw new Error("[react-barcode-scanner]: \n        Browser ask for secure origin (such as https) when use getUserMedia,\n        reference: https://sites.google.com/a/chromium.org/dev/Home/chromium-security/deprecating-powerful-features-on-insecure-origins\n      ");
    }
  }, []);
  var constraints = (0, import_react2.useMemo)(function() {
    var videoConstraints = Object.assign({}, DEFAULT_CONSTRAINTS, trackConstraints);
    return {
      audio: false,
      video: videoConstraints
    };
  }, [trackConstraints]);
  (0, import_react2.useEffect)(function() {
    var cancelled = false;
    var stream;
    var _ = function() {
      return __awaiter(_this, void 0, void 0, function() {
        var target;
        return __generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              target = ref.current;
              if (target == null)
                return [2];
              return [4, navigator.mediaDevices.getUserMedia(constraints)];
            case 1:
              stream = _a2.sent();
              if (target.mozSrcObject !== void 0) {
                target.mozSrcObject = stream;
              } else {
                target.srcObject = stream;
              }
              return [4, eventListener(target, "loadeddata")];
            case 2:
              _a2.sent();
              return [4, timeout(500)];
            case 3:
              _a2.sent();
              setCameraSupported(true);
              setStream(stream);
              return [2];
          }
        });
      });
    };
    var close = function() {
      stream === null || stream === void 0 ? void 0 : stream.getTracks().forEach(function(track) {
        track.stop();
      });
    };
    void _().then(function() {
      if (cancelled) {
        close();
      }
    });
    return function() {
      cancelled = true;
      close();
    };
  }, [ref, constraints, setStream]);
  return [isCameraSupported];
}

// node_modules/react-barcode-scanner/esm/hooks/use-scanning.js
var import_react3 = __toESM(require_react());
var DEFAULT_OPTIONS = {
  delay: 1e3,
  formats: ["qr_code"]
};
function useScanning(ref, provideOptions) {
  var _this = this;
  var _a = (0, import_react3.useState)(), detectedBarcodes = _a[0], setDetectBarcodes = _a[1];
  var _b = (0, import_react3.useState)(false), start = _b[0], setStart = _b[1];
  var options = (0, import_react3.useMemo)(function() {
    return Object.assign({}, DEFAULT_OPTIONS, provideOptions);
  }, [provideOptions]);
  var scan = (0, import_react3.useCallback)(function() {
    return __awaiter(_this, void 0, void 0, function() {
      var target, detector, detected;
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            target = ref.current;
            detector = new BarcodeDetector({
              formats: options.formats
            });
            return [4, detector.detect(target)];
          case 1:
            detected = _a2.sent();
            if (detected !== void 0 && detected.length > 0) {
              setDetectBarcodes(detected);
            }
            return [2];
        }
      });
    });
  }, [ref, options.formats]);
  (0, import_react3.useEffect)(function() {
    var target = ref.current;
    if (target == null || !start)
      return;
    var cancelled = false;
    var timer;
    var frame = function() {
      return __awaiter(_this, void 0, void 0, function() {
        return __generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              return [4, scan()];
            case 1:
              _a2.sent();
              if (!cancelled) {
                timer = window.setTimeout(frame, options.delay);
              }
              return [2];
          }
        });
      });
    };
    timer = window.setTimeout(frame, options.delay);
    return function() {
      clearTimeout(timer);
      cancelled = true;
    };
  }, [start, ref, options.delay, scan]);
  var open = (0, import_react3.useCallback)(function() {
    setStart(true);
  }, []);
  var close = (0, import_react3.useCallback)(function() {
    setStart(false);
  }, []);
  return [detectedBarcodes, open, close];
}

// node_modules/react-barcode-scanner/esm/hooks/use-torch.js
var import_react4 = __toESM(require_react());
function useTorch(open) {
  var _this = this;
  if (open === void 0) {
    open = false;
  }
  var _a = (0, import_react4.useState)(open), isOpen = _a[0], setOpen = _a[1];
  var _b = (0, import_react4.useState)(false), isSupportTorch = _b[0], setSupport = _b[1];
  var stream = useStreamState()[0];
  var track = (0, import_react4.useMemo)(function() {
    return stream === null || stream === void 0 ? void 0 : stream.getVideoTracks()[0];
  }, [stream]);
  (0, import_react4.useEffect)(function() {
    if (track == null)
      return;
    var capabilities = track.getCapabilities();
    if (capabilities.torch !== void 0) {
      setSupport(true);
    }
  }, [track]);
  var switchTorch = function() {
    return __awaiter(_this, void 0, void 0, function() {
      var e_1;
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            _a2.trys.push([0, 2, , 3]);
            if (!isSupportTorch) {
              throw new Error("[react-barcode-scanner]: \n          device does not support torch capability\n        ");
            }
            return [4, track.applyConstraints({
              advanced: [{
                torch: !isOpen
              }]
            })];
          case 1:
            _a2.sent();
            setOpen(!isOpen);
            return [3, 3];
          case 2:
            e_1 = _a2.sent();
            console.warn(e_1);
            return [3, 3];
          case 3:
            return [2];
        }
      });
    });
  };
  return [isSupportTorch, isOpen, switchTorch];
}

// node_modules/react-barcode-scanner/esm/components/barcode-scanner.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var import_react5 = __toESM(require_react());
var BarcodeScanner = function(_a) {
  var options = _a.options, onCapture = _a.onCapture, trackConstraints = _a.trackConstraints, props = __rest(_a, ["options", "onCapture", "trackConstraints"]);
  var instance = (0, import_react5.useRef)(null);
  var isCameraSupport = useCamera(instance, trackConstraints)[0];
  var _b = useScanning(instance, options), detected = _b[0], open = _b[1], close = _b[2];
  (0, import_react5.useEffect)(function() {
    if (isCameraSupport) {
      open();
    } else {
      close();
    }
  }, [close, isCameraSupport, open]);
  (0, import_react5.useEffect)(function() {
    if (detected !== void 0) {
      onCapture === null || onCapture === void 0 ? void 0 : onCapture(detected);
    }
  }, [detected, onCapture]);
  return (0, import_jsx_runtime.jsx)("video", __assign({ ref: instance, style: { width: "100%", height: "100%", objectFit: "cover" }, autoPlay: true, muted: true, playsInline: true }, props));
};
var barcode_scanner_default = BarcodeScanner;
export {
  barcode_scanner_default as BarcodeScanner,
  useCamera,
  useScanning,
  useStreamState,
  useTorch
};
//# sourceMappingURL=react-barcode-scanner.js.map
